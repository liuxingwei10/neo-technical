Making a Flashrom live CD in Arch Linux

1a.) Fetch and install my PKGBUILDs from AUR:

{{{
cd ~/
mkdir -p devel
cd devel
wget http://aur.archlinux.org/packages/superiotool/superiotool.tar.gz
wget http://aur.archlinux.org/packages/flashrom-svn-new/flashrom-svn-new.tar.gz
tar zxf superiotool.tar.gz
tar zxf flashrom-svn-new.tar.gz
cd superiotool
makepkg -i
cd ../flashrom-svn-new
makepkg -i
}}}

2a.) Set up a custom local repository:

{{{
cd ~/
mkdir -p repos
repo-add ~/repos/custom.db.tar.gz ~/devel/superiotool/superiotool*.pkg.tar.xz
repo-add ~/repos/custom.db.tar.gz ~/devel/flashrom-svn-new/flashrom-svn-new*.pkg.tar.xz
cp -PR ~/devel/superiotool/superiotool*.pkg.tar.xz ~/repos/
cp -PR ~/devel/flashrom-svn-new/flashrom-svn-new*.pkg.tar.xz ~/repos/
}}}

3a.) Edit /etc/pacman.conf

{{{
sudo nano -w /etc/pacman.conf
}}}

Replace sudo with su -c 'command here' if your sudoers file is not correctly configured.

You must correctly set the path to the custom repository and give it an exact path

Below is a full /etc/pacman.conf example.

{{{
[options]
HoldPkg     =
IgnorePkg   =
SyncFirst   = pacman
Architecture = auto

[custom]
Server = ///home/someone/repos

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist
}}}

4a.) Sync pacman and make sure your custom repository has been synchronized

{{{
sudo pacman -Syyu
}}}

Be sure that this shows up:

{{{
custom                  0.7K  315.0K/s 00:00:00 [######################] 100%
}}}

The majority of rest of the work from this point on is based off the Archiso wiki located here:

http://wiki.archlinux.org/index.php/Archiso

Please only use that guide for reference though, as we need to make some special settings for the final Flashrom live cd image, along with text files and Makefiles which actually work. :-)

5a.) Fetch archiso via git and install certain packages to build the image:

{{{
cd ~/
git clone git://projects.archlinux.org/archiso.git
cd archiso/archiso
sudo make install
sudo pacman -S mkinitcpio cdrkit squashfs-tools devtools syslinux mkinitcpio-nfs-utils nbd aufs2 aufs2-util base base-devel bash coreutils cpio dhcpcd dnsutils file fuse kernel26 syslinux nano subversion
}}}

6a.) Create a build directory inside archiso/archiso for cleanliness

{{{
mkdir -p flashrom-live
cd flashrom-live
}}}

7a.) Fetch my custom Makefile for archiso via my google code svn tree

{{{
svn checkout http://neo-technical.googlecode.com/svn/trunk/flashrom-live-cd
}}}

8a.) Make an mkinitcpio.conf file:

{{{
nano -w mkinitcpio.conf
}}}

Inside the file insert the following contents:

{{{
HOOKS="base udev memdisk archiso archiso_pxe_nbd archiso_loop_mnt pata scsi sata usb fw pcmcia filesystems usbinput"
}}}

9a.) Make a packages.list file with the following input, and please do not change anything:

{{{
aufs2
aufs2-util
base
bash
coreutils
cpio
dhcpcd
dnsutils
file
fuse
kernel26
syslinux
nano
sysvinit
flashrom
superiotool
xorg
xf86-input-synaptics
xf86-input-evdev
xf86-video-vesa
xf86-video-fbdev
ttf-liberation
ttf-dejavu
ttf-bitstream-vera
lxde
libfm
pcmanfm
lxtask
lxpanel
lxde-common
lxappearance
libftdi
openbox
acpid
binutils
bison
bzip2
cabextract
cpio
curl
cvs
git
dhcpcd
diffutils
dmidecode
dosfstools
ethtool
flex
gdb
grep
iputils
irssi
links
lsof
lynx
xz-utils
mdadm
minicom
ngrep
ntfsprogs
ntfs-3g
openssh
openvpn
pciutils
rp-pppoe
screen
strace
subversion
tar
unrar
valgrind
wget
wireless_tools
wpa_supplicant
zip
unzip
wicd
lxdm
}}}

10a.) Create a file called "isomounts" without quotes.

*BE SURE TO HAVE AN EMPTY LINE AT THE BOTTOM OF THE FILE OR YOU WILL GET A KERNEL PANIC!*

{{{
overlay.sqfs @ARCH@ / squashfs
root-image.sqfs @ARCH@ / squashfs
}}}

11a.) Make a boot-files directory and configure syslinux:

{{{
mkdir -p boot-files/syslinux
nano -w boot-files/syslinux/syslinux.cfg
}}}

In syslinux.cfg, insert the following:

{{{
prompt 1
timeout 0
display info.msg
DEFAULT FLASHROM

LABEL FLASHROM
KERNEL /boot/vmlinuz26
APPEND initrd=/boot/kernel26.img archisolabel=ARCH_201101 locale=en_US.UTF-8
}}}

12a.) Make a display message:

{{{
nano -w boot-files/syslinux/info.msg
}}}

Insert the following:

{{{
Flashrom Live CD generated by the work of NTU / Neo_The_User
Welcome!
Please press Enter to start the system
}}}

13a.) Make an overlay, aka static custom filesystem:

{{{
mkdir overlay
cd overlay
mkdir -p etc
nano -w etc/fstab
}}}

{{{
aufs                   /             aufs      noauto              0      0
none                   /dev/pts      devpts    defaults            0      0
none                   /dev/shm      tmpfs     defaults            0      0
}}}

14a.) Create a user at start-up:

{{{
echo "useradd -m -G users,wheel -s /bin/bash flashlive" >> etc/rc.local
}}}

15a.) Set terminal up:

{{{
mkdir etc/skel && nano -w etc/skel/.bashrc
}}}

Within the etc/skel/.bashrc file, insert the following:

{{{
alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '
}}}

16a.) Configure automatic LXDM login:

{{{
mkdir -p etc/lxdm && nano -w etc/lxdm/lxdm.conf
}}}

Within lxdm.conf:

{{{
[base]
autologin=flashlive
session=/usr/bin/startlxde
# numlock=0
greeter=/usr/lib/lxdm/lxdm-greeter-gtk

[server]
# arg=/usr/bin/X -nr vt1

[display]
gtk_theme=Clearlooks
bg=/usr/share/backgrounds/default.png
bottom_pane=1
lang=1
theme=Industrial

[input]

[userlist]
disable=0
white=
black=

}}}

17a.) Set HAL and LXDM at start-up:

{{{
nano -w etc/rc.conf
}}}

{{{
LOCALE="en_US.UTF-8"
HARDWARECLOCK="localtime"
TIMEZONE="America/Chicago"
KEYMAP="us"
CONSOLEFONT=
CONSOLEMAP=
USECOLOR="yes"

MOD_AUTOLOAD="yes"
MODULES=()
USELVM="no"

HOSTNAME="flashlive"
#For DHCP:
eth0="dhcp"
#Static IP example for eth0 device:
#eth0="eth0 192.168.0.10 netmask 255.255.255.0 broadcast 192.168.0.255"
INTERFACES=(eth0)
gateway="default gw 192.168.0.1"
#FOR DHCP:
ROUTES=(!gateway)
#Static IP:
#ROUTES=(gateway)

NETWORK_PERSIST="no"

DAEMONS=(!syslog-ng !netfs !crond hal !network wicd lxdm)
}}}

18a.) Generate etc/locale.gen file for locales:

{{{
nano -w etc/locale.gen
}}}

{{{
en_US.UTF-8 UTF-8
en_US ISO-8859-1
}}}

19a.) Configure sudoers file:

{{{
nano -w etc/sudoers
}}}

{{{
root ALL=(ALL) ALL

flashlive ALL=(ALL) NOPASSWD: ALL
}}}

Change permissions of the file to 0440:

{{{
chmod 0440 etc/sudoers
}}}

20a.) Make the iso:

{{{
cd ..
sudo make flashrom-live
}}}

Please note: Occasionally you might see an error show up saying "error: failed to commit transaction (invalid or corrupted package)" Please just ignore this, run sudo make clean, and sudo make flashrom-live again.

21a.) Burn the iso via brasero, k3b, or any tool of which you perfer. For USB flash drives and such, you can use "dd" or "dc3dd" for better precision.